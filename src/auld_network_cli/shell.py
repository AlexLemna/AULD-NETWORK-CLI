"""Shell implementation for the Auld Network CLI."""

from __future__ import annotations

from typing import Optional, assert_never

from .commands import CommandRegistry, _registry
from .custom_types import Mode


class Shell:
    """The command-line shell object.

    This keeps track of the current mode (`Shell.mode`) and the registry
    (`Shell.registry`) of all the commands defined in the source code
    with the `@command` flag.

    The main REPL loop is implemented in `Shell.run()`, and the prompt
    string is generated by `Shell.prompt()`.
    """

    def __init__(self, registry: Optional[CommandRegistry] = None) -> None:
        self.registry = registry or _registry
        self.mode: Mode = Mode.USER

    def prompt(self) -> str:
        """Returns the prompt string based on current mode.

        If `Mode.USER`, use '>'; if `Mode.ADMIN`, use '#'.
        """
        text = "Auld CLI"
        match self.mode:
            case Mode.USER:
                text += ">"
            case Mode.ADMIN:
                text += "#"
            case _:
                # This should never happen. We use `assert_never` to
                # tell type checkers that this branch should be unreachable.
                assert_never(self.mode)
        return f"{text} "

    def run(self) -> int:
        """Run the main REPL loop.

        Returns an exit code where 0 indicates success and 1 indicates failure.
        """
        while True:
            try:
                line = input(self.prompt())
            except EOFError:
                print()
                return 0
            except KeyboardInterrupt:
                print()
                continue

            line = line.strip()
            # If empty line, just reprompt. Otherwise, split
            # into tokens at whitespaces and try to resolve.
            if not line:
                continue  # start the loop over again
            else:
                tokens = line.split()

            # Resolve and execute
            try:
                cmd = self.registry.resolve(self.mode, tokens)
            except ValueError as e:
                print(e)
                continue

            rc = 0
            try:
                rc = cmd.handler(self)
            except Exception as e:
                print(f"handler error: {e}")
                rc = 1

            if rc < 0:
                return 0
